import numpy as np
import cv2
import keras
from numpy import load
from numpy import zeros
from numpy import ones
from numpy import expand_dims
from numpy.random import randint
from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array
from keras.initializers import RandomNormal
from keras.models import Model
from keras.models import Input
from keras.models import load_model
from matplotlib import pyplot as plt
from numpy import vstack

def load_real_samples(filename):

    # filename : input .npz filename

    # function loads and preprocesses image array before training
    
    # load compressed numpy arrays (.npz)
	data = load(filename)
	# unpack arrays
	X1, X2 = data['arr_0'], data['arr_1']
	# scale from [0,255] to [-1,1]
	X1 = (X1 - 127.5) / 127.5
	X2 = (X2 - 127.5) / 127.5

	return [X1, X2]

def plot_images(src_img, gen_img, tar_img, dest):

    # Plots all the input images in the destination specified by dest

    images = vstack((src_img, gen_img, tar_img))
    # scaling from [-1,1] to [0,1]
    images = (images + 1) / 2.0
    titles = ['Source', 'Generated', 'Expected']

    fig = plt.figure(figsize=(10, 20))

    for i in range(len(images)):
        plt.subplot(1, 3, 1 + i)
        plt.axis('off')
        plt.imshow(images[i])
        plt.title(titles[i])
    
    print('Figure saved successfully.')
    plt.savefig(dest)
 
def generate_prediction(models, dataset, dest):

    # models : input an array of models for prediction
    # dataset : path to compressed dataset (.npz format)
    # dest : destination path to store the plot

    [X1, X2] = dataset
    # selects a random image from the dataset
    ix = randint(0, len(X1), 1)

    dest = dest + 'train_' + str(ix) + '.jpg'

    # generate an image for every model
    for model in models:
        src_image, tar_image = X1[ix], X2[ix]
        gen_image = model.predict(src_image)
        plot_images(src_image, gen_image, tar_image, dest)

def prediction(model, img_url, size=(256, 512)):

    # model : accepts a model
    # img_url : input path to image
    # size : size of input image

    # load image and convert to numpy array
    pix = load_img(img_url, target_size=size)
    pix = img_to_array(pix)

    # split the image into source image and target image 
    s_img, t_img = pix[:, :256], pix[:, 256:]
    # scale from [0,255] to [-1,1]
    s = (s_img-127.5) / 127.5
    s = expand_dims(s, 0)

    # generate an image
    gen = model.predict(s)
    gen = (gen + 1) / 2
    
    # returns generated image, target image
    return gen[0], t_img

def load_and_plot(img_url, models, dest, size=(256, 512)):

    # img_url : path to image
    # models : an array of models for image generation
    # dest : destination path to save images
    # size : size of input images

    # Function used for comparison of images generated by models trained for different number of epochs

    # load and convert the image into numpy array
    pix = load_img(img_url, target_size=size)
    pix = img_to_array(pix)
    
    s_img, t_img = pix[:, :256], pix[:, 256:]
    s = (s_img-127.5) / 127.5
    s = expand_dims(sat, 0)

    fig = plt.figure(figsize=(10, 20))

    for i in range(len(models)):
        gen = models[i].predict(s)
        gen = (gen + 1) / 2

        plt.subplot(len(models), 3, i*3 + 1)
        plt.title('Source')
        plt.axis('off')
        plt.imshow(s_img.astype('uint8'))
        plt.subplot(len(models), 3, i*3 + 2)
        plt.title('Generated')
        plt.imshow(gen[0])
        plt.axis('off')
        plt.subplot(len(models), 3, i*3 + 3)
        plt.title('Expected')
        plt.axis('off')
        plt.imshow(t_img.astype('uint8'))

    print('Figure saved successfully at destination: %s' % dest)

    plt.savefig(dest)

# USAGE

model_1 = load_model('./models/maps/model_g_153440.h5')
model_2 = load_model('./models/maps/model_g_021920.h5')

for i in range(10):
    generate_random_map_image = randint(1, 1099)
    img_url = './assets/datasets/maps/val/' + str(generate_random_map_image) + '.jpg'
    dest_val = './assets/plots/maps/maps_' + str(generate_random_map_image) + '_val.jpg'

    load_and_plot(img_url, models=[model_2, model_1], dest=dest_val)

# # To test on trained images
# dest_dir = './assets/plots/maps/'
# dataset = load_real_samples('./assets/datasets/maps/compressed/maps_256.npz')
# generate_prediction(models=[model], dataset=dataset, dest=dest_dir)

# model_1 = load_model('./models/cityscapes/model_g_059500.h5')
# model_2 = load_model('./models/cityscapes/model_g_297500.h5')

# for i in range(10):
#     generate_random_map_image = randint(1, 501)
#     img_url = './assets/datasets/cityscapes/val/' + str(generate_random_map_image) + '.jpg'
#     dest_val_1 = './assets/plots/cityscapes/cityscapes_' + str(generate_random_map_image) + '_val.jpg'

#     load_and_plot(img_url, models=[model_1, model_2], dest=dest_val_1)

# To test on trained images
# dest_dir = './assets/plots/cityscapes/'
# dataset = load_real_samples('./assets/datasets/cityscapes/compressed/cityscapes_256.npz')
# generate_prediction(models=[model], dataset=dataset, dest=dest_dir)
